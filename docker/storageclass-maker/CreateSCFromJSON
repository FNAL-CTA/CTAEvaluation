#! /usr/bin/env python3

import base64
import json
import os
import subprocess

import gitlab

# FIXME: Parmeterize these and turn into JSON if needed (if not in the same repo)
SERVER = 'https://hepcloud-git.fnal.gov/'
REPO = 'scientific-storage/tape/cta-storageclass-mapping'

if 'SC_JSON_FILES' in os.environ:
    JSON_FILES = os.environ['SC_JSON_FILES'].split(',')
else:
    JSON_FILES = []

# Get existing storage classes and tape pools
command = subprocess.run(args=["cta-admin", "--json", "sc", "ls"], capture_output=True, check=True)
existing_scs = json.loads(command.stdout)
sc_names = [sc['name'] for sc in existing_scs]

command = subprocess.run(args=["cta-admin", "--json", "tp", "ls"], capture_output=True, check=True)
existing_tps = json.loads(command.stdout)
tp_names = [tp['name'] for tp in existing_tps]

command = subprocess.run(args=["cta-admin", "--json", "ar", "ls"], capture_output=True, check=True)
existing_ars = json.loads(command.stdout)
ar_sc_names = [ar['storageClass'] for ar in existing_ars]
ar_tp_names = [ar['tapepool'] for ar in existing_ars]

# Connect to project at GitLab
private_token = os.environ['GITLAB_TOKEN']
gl = gitlab.Gitlab(SERVER, private_token=private_token)
project = gl.projects.get(REPO)


def make_archive_route(sc_name, tp_name, copy=0, tp_existed=False, sc_existed=False):
    # FIXME: Check and/or set ArchiveRoutes that already exist or need another tape
    if ((not (tp_existed and sc_existed))
            or sc_name not in ar_sc_names
            or tp_name not in ar_tp_names):  # We have to make an archive route
        print(f" Adding archive route from {sc_name} to {tp_name}")
        subprocess.run(args=["cta-admin", "ar", "add",
                             "-t", tp_name,
                             "-s", sc_name,
                             "-c", str(copy + 1),
                             "-m", "Added by StorageClass maker script"],
                       check=True)


def update_tape_pool(vo, copy, tp_name, n_tapes, supply):
    tp_existed = False

    if tp_name in tp_names:
        tp_existed = True
        for tp in existing_tps:
            if tp['name'] == tp_name:
                print(f"Checking parameters for Tapepool {tp_name}")
                if int(tp['numPartialTapes']) != n_tapes:
                    print(f" numPartialTapes {tp['numPartialTapes']} for {tp_name} should be {n_tapes}")
                    # FIXME: Python API is coming at some point, will need to be adapted
                    subprocess.run(args=["cta-admin", "tp", "ch",
                                         "-n", tp_name,
                                         "-p", f"{n_tapes}"],
                                   check=True)
                if tp['supply'] != supply[copy]:
                    print(f" Supply for {tp_name} should be {supply[copy]}")
                    # FIXME: Python API is coming at some point, will need to be adapted
                    subprocess.run(args=["cta-admin", "tp", "ch",
                                         "-n", tp_name,
                                         "-s", supply[copy]],
                                   check=True)
    else:
        print(f"Tapepool {tp_name} does not exist. Creating")
        subprocess.run(args=["cta-admin", "tp", "add",
                             "-n", tp_name,
                             "-p", f"{n_tapes}",
                             "-e", "false",
                             "-s", supply[copy],
                             "--vo", vo,
                             "-m", "Added by StorageClass maker script"],
                       check=True)

    return tp_existed


# Read all files in JSON_FILES from SERVER/REPO
for json_file in JSON_FILES:
    f = project.files.get(json_file, 'main')
    file_content = base64.b64decode(f.content)
    description = json.loads(file_content)

    for item in description:
        vo = item['vo']
        tape_pools = item['tape_pools']

        for tape_pool in tape_pools:
            copies = tape_pool.get('copies', 1)
            name = tape_pool['name']
            n_tapes = tape_pool['tape_width']
            supply = tape_pool['supply']
            sc_name = f"{vo}.{name}@cta"
            sc_existed = False

            new_tp_names = [f"{vo}.{name}"]
            if copies > 1:
                new_tp_names.extend([f'{vo}.{name}_copy_{i + 1}' for i in range(copies - 1)])
                # Match the logic used in Dmitry's migration script for 2nd copy
                # tape_pool_name = storage_class
                # for i in range(number_of_copies):
                #     insert(tape_pool_name...)
                #     tape_pool_name = "%s_copy_%s" % (storage_class, str(i + 1),)

            if sc_name in sc_names:
                sc_existed = True
            else:
                print(f"Storageclass {sc_name} does not exist. Creating")
                subprocess.run(args=["cta-admin", "sc", "add",
                                     "-n", sc_name,
                                     "-c", str(copies),
                                     "--vo", vo,
                                     "-m", "Added by StorageClass maker script"],
                               check=True)

            for copy, tp_name in enumerate(new_tp_names):
                tp_existed = update_tape_pool(vo, copy, tp_name, n_tapes, supply)
                make_archive_route(sc_name, tp_name, copy, tp_existed, sc_existed)
