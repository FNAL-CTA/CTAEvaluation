#! /usr/bin/env python3

import base64
import json
import os
import subprocess

import gitlab

# FIXME: Parmeterize these and turn into JSON if needed (if not in the same repo)
SERVER = 'https://hepcloud-git.fnal.gov/'
REPO = 'scientific-storage/tape/cta-storageclass-mapping'
JSON_FILES = ['tapepool-alpha.json']

# Get existing storage classes and tape pools
command = subprocess.run(args=["cta-admin", "--json", "sc", "ls"], capture_output=True, check=True)
existing_scs = json.loads(command.stdout)
sc_names = [sc['name'] for sc in existing_scs]

command = subprocess.run(args=["cta-admin", "--json", "tp", "ls"], capture_output=True, check=True)
existing_tps = json.loads(command.stdout)
tp_names = [tp['name'] for tp in existing_tps]

# Connect to project at GitLab
private_token = os.environ['GITLAB_TOKEN']
gl = gitlab.Gitlab(SERVER, private_token=private_token)
project = gl.projects.get(REPO)

# Read all files in JSON_FILES from SERVER/REPO
for json_file in JSON_FILES:
    f = project.files.get(json_file, 'main')
    file_content = base64.b64decode(f.content)
    description = json.loads(file_content)

    for item in description:
        vo = item['vo']
        tape_pools = item['tape_pools']

        for tape_pool in tape_pools:
            copies = tape_pool.get('copies', 1)
            name = tape_pool['name']
            n_tapes = tape_pool['tape_width']
            supply = tape_pool['supply']
            sc_name = f"{vo}.{name}@cta"
            tp_name = f"{vo}.{name}"

            if copies != 1:
                # FIXME: Handle the case where copies = 2
                raise NotImplementedError

            if sc_name in sc_names:
                sc_existed = True
            else:
                # FIXME: Handle the case where it doesn't exist
                pass  # raise NotImplementedError

            if tp_name in tp_names:
                tp_existed = True
            else:
                # FIXME: Handle the case where it doesn't exist
                pass  # raise NotImplementedError

            if tp_existed:
                for tp in existing_tps:
                    if tp['name'] == tp_name:
                        print(f"Checking parameters for Tapepool {tp_name}")
                        if int(tp['numPartialTapes']) != n_tapes:
                            print(f" numPartialTapes {tp['numPartialTapes']} for {tp_name} should be {n_tapes}")
                            # FIXME: Python API is coming at some point, will need to be adapted
                            subprocess.run(args=["cta-admin", "tp", "ch",
                                                 "-n", tp_name,
                                                 "-p", f"{n_tapes}"],
                                           check=True)
                        if tp['supply'] != supply[0]:
                            print(f" Supply for {tp_name} should be {supply[0]}")
                            # FIXME: Python API is coming at some point, will need to be adapted
                            subprocess.run(args=["cta-admin", "tp", "ch",
                                                 "-n", tp_name,
                                                 "-s", supply[0]],
                                           check=True)

            # FIXME: Check and/or set ArchiveRoutes
